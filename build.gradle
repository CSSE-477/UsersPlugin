apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'

repositories {
    maven {
        url "https://maven.csse.rose-hulman.edu/artifactory/libs-release"
    }
}

dependencies {
	compile 'org.apache.logging.log4j:log4j-api:2.+'
	compile 'org.apache.logging.log4j:log4j-core:2.+'
	compile(group: 'edu.rosehulman.csse477.YoloSwagProject', name: 'CSSE477Project', version: '1.1.8')
	compile group: 'com.google.code.gson', name: 'gson', version: '2.3.1'

	testCompile 'junit:junit:4.+'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8


group = "edu.rosehulman.csse477.YoloSwagProject"

if (System.getenv("CI_BUILD_TAG") != null) {
    version = "${System.getenv("CI_BUILD_TAG")}"
} else {
    version = '1.0.1-SNAPSHOT'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

jar {
    manifest {
        attributes "Implementation-Title": "YoloSwagUsersPlugin",
                "Implementation-Version": "${version}",
                "Entry-Point": "servlet.UsersServletManager",
                "Context-Root": "userapp"
    }
}

uploadArchives {
	repositories {
		mavenDeployer {
			repository(url: "file://${buildDir}/repo")
		}
	}
}

task packageSources(type: Jar, dependsOn: 'classes') {
    from sourceSets.main.allSource
    classifier = 'sources'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
			artifact packageSources
        }
    }
}

publishing {
    repositories {
        maven {
            credentials {
                username System.getenv('MAVEN_USER')
                password System.getenv('MAVEN_PASSWORD')
            }
            url "https://maven.csse.rose-hulman.edu/artifactory/student-release-local"
        }
    }
}

// Code coverage analyzer
jacoco {
	toolVersion = "0.7.+"
}

jacocoTestReport {
	group = "Reporting"
	description = "Generate Jacoco coverage reports after running tests."
	additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
	
	reports {
		xml.enabled true
		csv.enabled false
		html.enabled true
	}
}

test {
	jacoco {
		append = false
	}
}

test.finalizedBy(jacocoTestReport)

task codeCoverageInfo (dependsOn: jacocoTestReport) {
	ext.srcFile = file("${reportsDir}/jacoco/test/jacocoTestReport.xml")
	doLast {
		println "Transforming source file."
		
		def parser = new XmlParser()
		parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false);
		parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
		parser.setFeature("http://xml.org/sax/features/namespaces", false)
				  
		def reportNode = parser.parse(srcFile)
		reportNode.children().each {
			if(it.name() == 'counter') {
				String type = it.@type
				float missed = it.@missed as float
				float covered = it.@covered as float
				float percentage = covered / (missed + covered) * 100
				println "Code Coverage[$type]: $percentage%"
			}
		}
	}
}
jacocoTestReport.finalizedBy(codeCoverageInfo)