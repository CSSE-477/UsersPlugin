plugins {
	id 'org.hidetake.ssh' version '2.7.0'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'

repositories {
    maven {
        url "https://maven.csse.rose-hulman.edu/artifactory/libs-release"
    }
}

dependencies {
	compile 'org.apache.logging.log4j:log4j-api:2.+'
	compile 'org.apache.logging.log4j:log4j-core:2.+'
	compile(group: 'edu.rosehulman.csse477.YoloSwagProject', name: 'CSSE477Project', version: '1.2.11')
	compile group: 'com.google.code.gson', name: 'gson', version: '2.3.1'

	testCompile "org.mockito:mockito-core:1.+"
	testCompile 'junit:junit:4.+'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8


group = "edu.rosehulman.csse477.YoloSwagProject"

if (System.getenv("CI_BUILD_TAG") != null) {
    version = "${System.getenv("CI_BUILD_TAG")}"
} else {
    version = '1.0.1-SNAPSHOT'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

jar {
    manifest {
        attributes "Implementation-Title": "YoloSwagUsersPlugin",
                "Implementation-Version": "${version}",
                "Entry-Point": "servlet.UsersServletManager",
                "Context-Root": "userapp"
    }
}

uploadArchives {
	repositories {
		mavenDeployer {
			repository(url: "file://${buildDir}/repo")
		}
	}
}

task packageSources(type: Jar, dependsOn: 'classes') {
    from sourceSets.main.allSource
    classifier = 'sources'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
			artifact packageSources
        }
    }
}

publishing {
    repositories {
        maven {
            credentials {
                username System.getenv('MAVEN_USER')
                password System.getenv('MAVEN_PASSWORD')
            }
            url "https://maven.csse.rose-hulman.edu/artifactory/student-release-local"
        }
    }
}

// Code coverage analyzer
jacoco {
	toolVersion = "0.7.+"
}

jacocoTestReport {
	group = "Reporting"
	description = "Generate Jacoco coverage reports after running tests."
	additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
	
	reports {
		xml.enabled true
		csv.enabled false
		html.enabled true
	}
}

test {
	jacoco {
		append = false
	}
}

test.finalizedBy(jacocoTestReport)

task codeCoverageInfo (dependsOn: jacocoTestReport) {
	ext.srcFile = file("${reportsDir}/jacoco/test/jacocoTestReport.xml")
	doLast {
		println "Transforming source file."
		
		def parser = new XmlParser()
		parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false);
		parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
		parser.setFeature("http://xml.org/sax/features/namespaces", false)
				  
		def reportNode = parser.parse(srcFile)
		reportNode.children().each {
			if(it.name() == 'counter') {
				String type = it.@type
				float missed = it.@missed as float
				float covered = it.@covered as float
				float percentage = covered / (missed + covered) * 100
				println "Code Coverage[$type]: $percentage%"
			}
		}
	}
}
jacocoTestReport.finalizedBy(codeCoverageInfo)

// SSH Publishing

ssh.settings { knownHosts = allowAnyHosts }

remotes {
	deployment {
		host = System.getenv('SSH_HOST')
		user = System.getenv('SSH_USER')
		password = System.getenv('SSH_PASSWORD')
	}
}

task publishToWebServer(dependsOn: jar) << {
	ssh.run {
		session(remotes.deployment) {
			println "Checking if remote /home/csse/YoloSwagSWS/bin/plugin exists ..."
			def result = execute('if test -d /home/csse/YoloSwagSWS/bin/plugin; then echo "exists"; fi')						
			if(result != "exists") {
				println("Remote /home/csse/YoloSwagSWS/bin/plugin does not exist, build is failing...")
				throw new GradleException('/home/csse/YoloSwagSWS/bin/plugin does not exist. Cannot drop the plugin.')
			}
			
			println "Checking if UsersPlugin jar exists..."
			result = execute('if test ! -f /home/csse/YoloSwagSWS/bin/plugin/UsersPlugin*.jar; then echo "notFound"; fi')						
			if(result != "notFound") {
				println "Stopping server to add jar..."
				executeSudo('service webserver stop', pty: true)
				println "Server stopped"

				println "Removing UsersPlugin*.jar from /home/csse/YoloSwagSWS/bin/plugin ..."
				executeSudo('rm /home/csse/YoloSwagSWS/bin/plugin/UsersPlugin*.jar', pty: true)

				println "Starting service..."
				executeSudo('service webserver start', pty: true)
				println "Service started"		
			}

			result = execute('if test -d /tmp/UsersPlugin; then echo "exists"; fi')						
			if(result != "exists") {
				println("Remote /tmp/UsersPlugin does not exist, creating a new one...")
				execute('mkdir -p /tmp/UsersPlugin')
				println("Remote /tmp/UsersPlugin created!")
			}			
			println("Putting jar into /tmp/UsersPlugin ...")
			put from: "${buildDir}/libs/*.jar", into: '/tmp/UsersPlugin'

			println("Moving the jar into /home/csse/YoloSwagSWS/bin/plugin")
			executeSudo('mv /tmp/UsersPlugin/*.jar /home/csse/YoloSwagSWS/bin/plugin', pty: true)
			println("Successfully dropped jar into plugin directory!")
			
			sleep(3 * 1000)
			println("Testing curl 200 response")
			put from: "${projectDir}/src/main/resources/e2e.sh", into: '/tmp/UsersPlugin'
			executeSudo('/bin/bash /tmp/UsersPlugin/e2e.sh', pty: true)
			println("Success!")

			println("Removing /tmp/UsersPlugin")
			execute('rm -rf /tmp/UsersPlugin')
			println("Successfully removed the /tmp/UsersPlugin directory")
			println("YoloSwagDefaultPlugin has been deployed to " + System.getenv('SSH_HOST'))
		}
	}
}
